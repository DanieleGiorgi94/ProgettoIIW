#include "../header.h"

void list_command_handler(char *cmd, char *token, u64 *server_isn,
        client_info *c_info) {
    char *argv = c_info->argv;
    int sockfd;
    struct sockaddr_in servaddr;

    request_t *req = (request_t *) dynamic_allocation(sizeof(request_t));
    u32 slen = sizeof(struct sockaddr);

    if (create_connection(cmd, token, server_isn, c_info)) {
        //nuova socket
        if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
            perror("socket() failed");
            exit(EXIT_FAILURE);
        }
    
        c_info->new_sockfd = sockfd;
        printf("new port number: %d\n", c_info->port_number);
    
        memset((void *) &servaddr, 0, sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
        servaddr.sin_port = htons(c_info->port_number);
        if (inet_pton(AF_INET, argv, &servaddr.sin_addr) <= 0) {
            fprintf(stderr, "errore in inet_pton");
            exit(EXIT_FAILURE);
        }

        while (recvfrom(sockfd, (void *) req, sizeof(request_t), MSG_DONTWAIT,
                        (struct sockaddr *) &c_info->servaddr, &slen) < 0) {
            if (errno != EAGAIN && errno != EWOULDBLOCK) {
                perror("recvfrom() (ricezione del pacchetto request_t)");
                exit(EXIT_FAILURE);
            }
        }

        printf("Waiting for file list from server...\n");

        send_request(cmd, token, req, c_info);

        printf("sent request\n");

//        clock_t tspan;
//        tspan = clock();
        while (recvfrom(sockfd, (void *) req, sizeof(request_t), MSG_DONTWAIT,
                        (struct sockaddr *) &c_info->servaddr, &slen) < 0) {
            if (errno != EAGAIN && errno != EWOULDBLOCK) {
                perror("recvfrom() (ricezione del pacchetto request_t)");
                exit(EXIT_FAILURE);
            }
//            if (clock() - tspan > 1000){
//                send_request(cmd, token, req, c_info);
//                tspan = clock();
//            }
        }

        //Se la lista dei file non Ã¨ vuota
        if (strlen(req->payload)) {
            printf("--- FILE PRESENTI NEL SERVER: --- \n\n");
            printf("%s\n", (req->payload));
            printf("---------------------------------\n");
        }
        else printf("Nessun file presente nel server.\n");

        return;
    }
}
